abstract let abstractWithValue = 23;
abstract let ((a: Int): Int);
let nonAbstractWithoutValue;
abstract let abstractWithoutAnnotation;

abstract type AbstractWithBody = Int;
type NonAbstractWithoutBody;

let Collection = module {
	abstract type This: [*] => *;
	abstract let empty: [A] => This[A];
};

let ModuleAppWithTypeError = Collection with module {
	extern type This: *;
	let empty = 3;
};

let Array = Collection with module {
	extern type Array: [*] => *;
	type This: [*] => * = Array;
	extern let _concat: [A] => fn(Array[A], Array[A]) => Array[A];
	extern let empty: [A] => This[A];
	let concat: [A] => fn(This[A], This[A]) => This[A] = _concat;
};

let ArrayWithoutEmpty = Collection with module {
	extern type This: [*] => *;
};

let e = ArrayWithoutEmpty.empty;
