{
  "loc":{
    "start":{
      "line":1,
      "column":1
    },
    "end":{
      "line":32,
      "column":1
    }
  },
  "symbols":{
    "e":{
      "typ":"Uninferred"
    },
    "Collection":{
      "typ":"Abstract(Map(This -> ([*] => *)),Map(empty -> ([A] => Var(This)[Var(A)])),Module(Map(),Map()))"
    },
    "a":{
      "typ":"Int"
    },
    "Array":{
      "typ":"Module(Map(This -> ([*] => *), Array -> ([*] => *)),Map(empty -> ([A] => Var(Array)[Var(A)]), _concat -> ([A] => (fn(Var(Array)[Var(A)], Var(Array)[Var(A)]) => Var(Array)[Var(A)])), concat -> ([A] => (fn(Var(Array)[Var(A)], Var(Array)[Var(A)]) => Var(Array)[Var(A)]))))"
    },
    "abstractWithoutAnnotation":{
      "typ":"Existential(abstractWithoutAnnotation)"
    },
    "ModuleAppWithTypeError":{
      "typ":"Module(Map(This -> *),Map(empty -> Int))"
    },
    "nonAbstractWithoutValue":{
      "typ":"Existential(nonAbstractWithoutValue)"
    },
    "ArrayWithoutEmpty":{
      "typ":"Abstract(Map(),Map(empty -> ([A] => Var(This)[Var(A)])),Module(Map(This -> ([*] => *)),Map()))"
    },
    "abstractWithValue":{
      "typ":"Int"
    }
  },
  "types":{
    "NonAbstractWithoutBody":"*",
    "AbstractWithBody":"*"
  },
  "children":[
    {
      "loc":{
        "start":{
          "line":9,
          "column":25
        },
        "end":{
          "line":12,
          "column":1
        }
      },
      "symbols":{
        "empty":{
          "typ":"([A] => Var(This)[Var(A)])"
        }
      },
      "types":{
        "This":"([*] => *)"
      },
      "children":[
        {
          "loc":{
            "start":{
              "line":11,
              "column":22
            },
            "end":{
              "line":11,
              "column":35
            }
          },
          "symbols":{},
          "types":{
            "A":"*"
          },
          "children":[]
        }
      ]
    },
    {
      "loc":{
        "start":{
          "line":14,
          "column":53
        },
        "end":{
          "line":17,
          "column":1
        }
      },
      "symbols":{
        "empty":{
          "typ":"Int"
        }
      },
      "types":{
        "This":"*"
      },
      "children":[]
    },
    {
      "loc":{
        "start":{
          "line":19,
          "column":36
        },
        "end":{
          "line":25,
          "column":1
        }
      },
      "symbols":{
        "empty":{
          "typ":"([A] => Var(Array)[Var(A)])"
        },
        "_concat":{
          "typ":"([A] => (fn(Var(Array)[Var(A)], Var(Array)[Var(A)]) => Var(Array)[Var(A)]))"
        },
        "concat":{
          "typ":"([A] => (fn(Var(Array)[Var(A)], Var(Array)[Var(A)]) => Var(Array)[Var(A)]))"
        }
      },
      "types":{
        "This":"([*] => *)",
        "Array":"([*] => *)"
      },
      "children":[
        {
          "loc":{
            "start":{
              "line":22,
              "column":22
            },
            "end":{
              "line":22,
              "column":62
            }
          },
          "symbols":{},
          "types":{
            "A":"*"
          },
          "children":[]
        },
        {
          "loc":{
            "start":{
              "line":23,
              "column":20
            },
            "end":{
              "line":23,
              "column":33
            }
          },
          "symbols":{},
          "types":{
            "A":"*"
          },
          "children":[]
        },
        {
          "loc":{
            "start":{
              "line":24,
              "column":14
            },
            "end":{
              "line":24,
              "column":51
            }
          },
          "symbols":{},
          "types":{
            "A":"*"
          },
          "children":[]
        }
      ]
    },
    {
      "loc":{
        "start":{
          "line":27,
          "column":48
        },
        "end":{
          "line":29,
          "column":1
        }
      },
      "symbols":{},
      "types":{
        "This":"([*] => *)"
      },
      "children":[]
    }
  ]
}