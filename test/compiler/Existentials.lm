extern let fail: [A] => A;
abstract type String;
type KindMismatch: * = List;
extern type List: [*] => *;
type ListAlias: [*] => * = List;
extern type DeepHKT: [*, [*, *] => *] => [*] => *;

let kindMismatchFunc = fn[A: [*] => *](a: A): Int => 1;
let kindMismatchRetTyp = fn[KFR: [*] => *](a: Int): KFR => fail;
let kindAnnotatedFn =
  fn[A: [*] => *, B](b: B): A[B] => fail;

extern let emptyList: [A] => ListAlias[A];
let intList: List[Int] = emptyList;
extern let cons: [Item] => fn(hd: Item, tl: List[Item]) => List[Item];
let consErr = cons(true, intList);
let consInt = cons(1, intList);
extern type KindError = DeepHKT[List, Int];
