enum Option(A: Type)
	= Some(value: A)
    | None;

let boolSome = Option(Int).Some(2);
let None = fn(T: Type) => Option(T).None;
let x: Option(Bool).T = None(Bool);

enum List(A: Type)
    = Empty;
    | Cons(head: A, tail: List);

let listEmpty = Empty(Int);
let listInt = Cons(Int)(1, Empty(Int));
let listInt1: List(Int) = listInt;