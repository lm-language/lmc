extern duplicateParam: [A, A] => A;
extern fail: [A] => A;
let idErr: [X] => (fn (x: X) => X) = fn(x) => true;
let idAnnotated: [X] => (fn (x: X) => X) = fn(x) => x;
let idWithPatternAndLambdaAnnotation: [X] => (fn (x: X) => X) = fn[A](x: A): A => x;
let tooManyParams: [X, Y] => (fn (x: X, y: Y) => X) = fn[A, B, C](x: A, y: B): A => x;
let fst = fn[A, B](a: A, b: B) => a;
let snd = fn[A, B](a: A, b: B) => b;
let sndError: [A,B] => fn(A, B) => B = fn(a, b) => a;
let idInt: fn(Int) => Int = idAnnotated;
let idBoolWithStrictLabel: fn(x: Bool) => Bool = idAnnotated;
let boolVal: Bool = fail;
let boolVal1 = idAnnotated(true);
let intVal1 = fst(1, true);
