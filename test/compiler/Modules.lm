extern type _String;
extern let _empty: _String;
extern let _append: fn(_String, _String) => _String;

let String = module {
  type T = _String;

  let append = _append;
  let empty = _empty;
};

type Err1 = _empty.X;
type Err2 = String.Y;
type String = String.T;

let notModule = _empty.x;
let noSuchProp = String.xyz;

let empty: String.T = String.empty;
let emptyInferred = String.empty;
let append = String.append;

let s: String = String.append(String.empty, empty);
let sInferred = String.append(String.empty, String.empty);
